#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ—Ç–∫–∏ —É—Ö–æ–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""

import os
import sys
import django
from datetime import datetime, time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.utils import timezone
from apps.attendance.models import AttendanceRecord
from apps.users.models import User


def test_auto_checkout():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–º–µ—Ç–∫—É —É—Ö–æ–¥–∞"""
    print("=== –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ—Ç–∫–∏ —É—Ö–æ–¥–∞ ===")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = timezone.now()
    local_time = timezone.localtime(current_time)
    today = timezone.localdate()
    
    print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {local_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–°–µ–≥–æ–¥–Ω—è: {today}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ
    active_records = AttendanceRecord.objects.filter(
        date=today,
        check_in__isnull=False,
        check_out__isnull=True
    )
    
    print(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ —Ä–∞–±–æ—Ç–µ: {active_records.count()}")
    
    if active_records.exists():
        print("\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ:")
        for record in active_records:
            check_in_local = timezone.localtime(record.check_in)
            print(f"  - {record.employee.get_full_name() or record.employee.username}")
            print(f"    –ü—Ä–∏—à–µ–ª: {check_in_local.strftime('%H:%M:%S')}")
            print(f"    –û–ø–æ–∑–¥–∞–Ω–∏–µ: {'–î–∞' if record.is_late else '–ù–µ—Ç'}")
            print(f"    –®—Ç—Ä–∞—Ñ: {record.penalty_amount} —Å–æ–º–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–º–µ—Ç–∫—É —É—Ö–æ–¥–∞
    if local_time.time() >= time(18, 0):
        print(f"\n‚úÖ –í—Ä–µ–º—è –ø–æ—Å–ª–µ 18:00 - –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–º–µ—Ç–∫—É —É—Ö–æ–¥–∞")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–º–µ—Ç–∫—É —É—Ö–æ–¥–∞
        checked_out_count = 0
        for record in active_records:
            record.check_out = current_time
            record.save()
            checked_out_count += 1
            print(f"  ‚úÖ –û—Ç–º–µ—á–µ–Ω —É—Ö–æ–¥ –¥–ª—è {record.employee.get_full_name() or record.employee.username}")
        
        print(f"\nüéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–µ–Ω —É—Ö–æ–¥ –¥–ª—è {checked_out_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    else:
        print(f"\n‚è∞ –í—Ä–µ–º—è –¥–æ 18:00 - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ—Ç–∫–∞ —É—Ö–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è: 18:00")
        print(f"   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {local_time.strftime('%H:%M')}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ===")
    total_records = AttendanceRecord.objects.filter(date=today)
    present_today = total_records.count()
    checked_out_today = total_records.filter(check_out__isnull=False).count()
    late_today = total_records.filter(is_late=True).count()
    total_penalties = sum(record.penalty_amount for record in total_records)
    
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {present_today}")
    print(f"–£—à–ª–∏: {checked_out_today}")
    print(f"–ù–∞ —Ä–∞–±–æ—Ç–µ: {present_today - checked_out_today}")
    print(f"–û–ø–æ–∑–¥–∞–Ω–∏–π: {late_today}")
    print(f"–û–±—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤: {total_penalties} —Å–æ–º–æ–≤")


def test_attendance_status():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    print("\n=== –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ===")
    
    employees = User.objects.filter(is_active=True)
    today = timezone.localdate()
    
    print(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employees.count()}")
    
    for employee in employees:
        try:
            record = AttendanceRecord.objects.get(employee=employee, date=today)
            status = 'checked_out' if record.check_out else 'present'
            check_in_time = timezone.localtime(record.check_in) if record.check_in else None
            check_out_time = timezone.localtime(record.check_out) if record.check_out else None
        except AttendanceRecord.DoesNotExist:
            status = 'absent'
            check_in_time = None
            check_out_time = None
        
        status_emoji = {
            'present': 'üü¢',
            'checked_out': '‚ö™',
            'absent': 'üî¥'
        }.get(status, '‚ùì')
        
        print(f"{status_emoji} {employee.get_full_name() or employee.username}: {status}")
        if check_in_time:
            print(f"   –ü—Ä–∏—à–µ–ª: {check_in_time.strftime('%H:%M')}")
        if check_out_time:
            print(f"   –£—à–µ–ª: {check_out_time.strftime('%H:%M')}")


if __name__ == '__main__':
    test_auto_checkout()
    test_attendance_status() 